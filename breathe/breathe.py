#!/usr/bin/env python3

"""
Generate intensity table for breathe animation.

We are using exp(sin(x)) as the brightness function:

sin() to get a nice wave effect

exp() to better map that to the
non-linear response of the human eye to light.

Brightness of LED is proportional to the reciprocol of the on time.

"""

import math

from pprint import pprint as dump


def generate_data(num_rows):
    angle = 0.0
    stop = math.pi * 2
    step = stop / num_rows

    data = []
    while angle < stop:
        value = math.exp(math.sin(angle))
        data.append(value)
        angle += step
    return data


def scale_data(data, max_value, min_value=0):
    peak = max(data)
    trough = min(data)
    factor = max_value / (peak - trough)
    scaled_data = []
    for raw in data:
        value = (raw - trough) * factor
        value = round(value)
        scaled_data.append(value)
    return scaled_data


def print_code(data):
    print("/* Generated by 'breathe.py' */")
    print()
    print("#include <avr/pgmspace.h>")
    print("#include <stdint.h>")
    print()
    print()
    print(f"const uint8_t num_brightnesses PROGMEM = {len(data)};")
    print(f"const uint8_t brightnesses[{len(data)}] PROGMEM = {{")
    scaled_data = scale_data(data, 255)
    for value, scaled in zip(data, scaled_data):
        formatted = f"    {scaled},"
        percent = (scaled / 255) * 100
        print(f"{formatted:<10}  // {percent:.1F}")
    print("};")


if __name__ == '__main__':
    num_rows = 254;
    data = generate_data(num_rows)
    print_code(data)
